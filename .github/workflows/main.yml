name: Sync Node Alpine Image

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"  # Runs daily at 2 AM UTC

jobs:
  check-and-update-node-alpine:
    runs-on: ubuntu-latest
    outputs:
      pushed: ${{ steps.push-result.outputs.pushed }}
      new_tag: ${{ steps.dockerhub.outputs.FULL_TAG }}

    env:
      AWS_REGION: eu-central-1
      ECR_REPO: my-alpine-node-image

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch Latest Node Alpine Tag
        id: dockerhub
        run: |
          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/node/tags/?page_size=100" \
          | jq -r '.results[].name' \
          | grep -E '^[0-9]+(\.[0-9]+)*-alpine$' \
          | sort -Vr \
          | head -n 1)
          echo "Latest Node Alpine Tag: $LATEST_TAG"
          echo "FULL_TAG=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if ECR tag already exists
        id: check-ecr
        run: |
          TAG=${{ steps.dockerhub.outputs.FULL_TAG }}
          IMAGE_EXISTS=$(aws ecr describe-images \
            --repository-name $ECR_REPO \
            --image-ids imageTag=$TAG \
            --region $AWS_REGION \
            --query 'imageDetails[0].imageTags[0]' \
            --output text || echo "NOT_FOUND")
          echo "ECR_IMAGE_TAG=$IMAGE_EXISTS" >> "$GITHUB_OUTPUT"

      - name: Pull, Tag, and Push to ECR
        id: push-result
        run: |
          TAG=${{ steps.dockerhub.outputs.FULL_TAG }}
          if [ "${{ steps.check-ecr.outputs.ECR_IMAGE_TAG }}" = "NOT_FOUND" ]; then
            echo "New version detected. Syncing..."
            docker pull node:$TAG
            docker tag node:$TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TAG
            docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TAG
            echo "pushed=true" >> "$GITHUB_OUTPUT"
          else
            echo "Image already up-to-date. Skipping push."
            echo "pushed=false" >> "$GITHUB_OUTPUT"
          fi

  notify-slack:
       name: Notify Slack
       needs: check-and-update-node-alpine
       if: needs.check-and-update-node-alpine.outputs.pushed == 'true'
       runs-on: ubuntu-latest
       environment: autoscaler-monitoring

       steps:
        - name: Notify Slack about new Node Alpine version
          uses: slackapi/slack-github-action@v2
          with:
            token: ${{ secrets.SLACK_BOT_TOKEN }}
            method: chat.postMessage
            payload: |
              {
                "channel": "#production-alerts",
                "text": "âœ… *Node Alpine Updated!*\nNew version `${{ needs.check-and-update-node-alpine.outputs.new_tag }}` has been pushed to ECR repo `${{ needs.check-and-update-node-alpine.outputs.ecr_repo }}`."
              }


