name: Sync Node Alpine Image

on:
  workflow_dispatch:

jobs:
  check-and-update-node-alpine:
    runs-on: ubuntu-latest
    outputs:
      pushed: ${{ steps.push-result.outputs.pushed }}
      new_tag: ${{ steps.dockerhub.outputs.FULL_TAG }}
      ecr_repo: ${{ steps.set-ecr-repo.outputs.ecr_repo }}

    env:
      AWS_REGION: eu-central-1
      ECR_REPO: my-alpine-node-image

    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch Latest Node Alpine Tag
        id: dockerhub
        run: |
          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/node/tags/?page_size=100" \
          | jq -r '.results[].name' \
          | grep -E '^[0-9]+(\.[0-9]+)*-alpine$' \
          | sort -Vr \
          | head -n 1)
          echo "Latest Node Alpine Tag: $LATEST_TAG"
          echo "FULL_TAG=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::676206900064:role/GitHubAction-AssumeRoleWithOIDC #change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if ECR tag already exists
        id: check-ecr
        run: |
          TAG=${{ steps.dockerhub.outputs.FULL_TAG }}
          IMAGE_EXISTS=$(aws ecr describe-images \
            --repository-name $ECR_REPO \
            --image-ids imageTag=$TAG \
            --region $AWS_REGION \
            --query 'imageDetails[0].imageTags[0]' \
            --output text || echo "NOT_FOUND")
          echo "ECR_IMAGE_TAG=$IMAGE_EXISTS" >> "$GITHUB_OUTPUT"

      - name: Pull, Tag, and Push to ECR
        id: push-result
        run: |
          TAG=${{ steps.dockerhub.outputs.FULL_TAG }}
          if [ "${{ steps.check-ecr.outputs.ECR_IMAGE_TAG }}" = "NOT_FOUND" ]; then
            echo "New version detected. Syncing..."
            docker pull node:$TAG
            docker tag node:$TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TAG
            docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TAG
            echo "pushed=true" >> "$GITHUB_OUTPUT"
          else
            echo "Image already up-to-date. Skipping push."
            echo "pushed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set ECR Repo Name Output
        id: set-ecr-repo
        run: echo "ecr_repo=${{ env.ECR_REPO }}" >> "$GITHUB_OUTPUT"

  # notify-slack:
  #   name: Notify Slack
  #   needs: check-and-update-node-alpine
  #   if: needs.check-and-update-node-alpine.outputs.pushed == 'true'
  #   runs-on: ubuntu-latest
  #   env:
  #     ECR_REPO: my-alpine-node-image

  #   steps:
  #     - name: Debug Outputs
  #       run: |
  #         echo "Tag: ${{ needs.check-and-update-node-alpine.outputs.new_tag }}"
  #         echo "Repo: ${{ needs.check-and-update-node-alpine.outputs.ecr_repo }}"

  #     - name: Send Slack notification
  #       uses: slackapi/slack-github-action@v2
  #       with:
  #         token: ${{ secrets.SLACK_BOT_TOKEN }}
  #         method: chat.postMessage
  #         payload: >-
  #           {
  #             "channel": "#production-alerts",
  #             "text": "✅ *Node Alpine Updated!*\n\nNew version `${{ needs.check-and-update-node-alpine.outputs.new_tag }}` has been pushed to ECR repo `${{ needs.check-and-update-node-alpine.outputs.ecr_repo }}`."
  #           }
