name: ECR Node Alpine Updater

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:     # Allows manual trigger

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Latest Node Alpine Tag
        id: latest_tag
        run: |
          latest=$(curl -s https://registry.hub.docker.com/v2/repositories/library/node/tags | jq -r '.results[] | select(.name | contains("alpine")) | .name' | sort -Vr | head -n 1)
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Download Previous Version Artifact (if any)
        uses: actions/download-artifact@v4
        with:
          name: node-alpine-version
          path: .

      - name: Load Previous Version
        id: load_version
        run: |
          if [ -f "version.txt" ]; then
            previous=$(cat version.txt)
            echo "previous_version=$previous" >> $GITHUB_OUTPUT
          else
            echo "previous_version=none" >> $GITHUB_OUTPUT
          fi

      - name: Compare Versions
        id: compare
        run: |
          echo "Previous: ${{ steps.load_version.outputs.previous_version }}"
          echo "Latest: ${{ steps.latest_tag.outputs.latest_tag }}"
          if [ "${{ steps.load_version.outputs.previous_version }}" = "${{ steps.latest_tag.outputs.latest_tag }}" ]; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if Already Up-to-Date
        if: steps.compare.outputs.up_to_date == 'true'
        run: echo "Node Alpine image is up to date. Exiting."

      - name: Pull Latest Node Alpine Image
        if: steps.compare.outputs.up_to_date == 'false'
        run: |
          docker pull node:${{ steps.latest_tag.outputs.latest_tag }}

      - name: Tag and Push to ECR
        if: steps.compare.outputs.up_to_date == 'false'
        env:
          AWS_REGION: eu-central-1
          ECR_REPO: your-ecr-repo-name
        run: |
          account_id=$(aws sts get-caller-identity --query Account --output text)
          ecr_url=$account_id.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO
          docker tag node:${{ steps.latest_tag.outputs.latest_tag }} $ecr_url:node-${{ steps.latest_tag.outputs.latest_tag }}
          docker push $ecr_url:node-${{ steps.latest_tag.outputs.latest_tag }}

      - name: Save Current Version
        if: steps.compare.outputs.up_to_date == 'false'
        run: echo "${{ steps.latest_tag.outputs.latest_tag }}" > version.txt

      - name: Upload New Version Artifact
        if: steps.compare.outputs.up_to_date == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: node-alpine-version
          path: version.txt
